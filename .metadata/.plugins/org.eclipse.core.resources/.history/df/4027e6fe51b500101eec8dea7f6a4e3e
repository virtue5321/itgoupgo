package com.itgoupgo.community.knowledge.model.service;

import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.itgoupgo.community.knowledge.model.dao.KnowledgeDao;
import com.itgoupgo.community.knowledge.model.vo.KnowledgeBbs; // KnowledgeBbs VO 사용

/**
 * 지식공유 게시판 Service Layer
 * 비즈니스 로직을 처리하고 트랜잭션을 관리합니다.
 */
@Service
public class KnowledgeService {
	
	@Autowired
	private SqlSessionTemplate sqlSession; // MyBatis 쿼리 실행을 위한 SqlSessionTemplate
	
	@Autowired
	private KnowledgeDao knowledgeDao; // 데이터베이스 접근을 위한 DAO 주입

    // 게시글 목록 페이징 처리를 위한 상수 설정
    private static final int BOARD_LIMIT = 10; 
	
	/**
	 * 전체 게시글 개수 조회
	 * @return 전체 게시글 수
	 */
	public int selectListCount() {
		return knowledgeDao.selectListCount(sqlSession);
	}
	
	/**
	 * 게시글 목록 조회 (페이징 적용)
	 * @param currentPage 현재 페이지 번호
	 * @return 현재 페이지에 해당하는 게시글 목록
	 */
	public List<KnowledgeBbs> selectList(int currentPage) {
        // 페이징 처리를 위한 offset 계산
        int offset = (currentPage - 1) * BOARD_LIMIT;
        
        // RowBounds 객체 생성 (offset: 건너뛸 행 수, limit: 가져올 행 수)
        RowBounds rowBounds = new RowBounds(offset, BOARD_LIMIT);
        
		return knowledgeDao.selectList(sqlSession, rowBounds);
	}

    /**
     * 게시글 상세 조회 및 조회수 증가 처리 (트랜잭션 적용)
     * @param knowledgeNo 조회할 게시글 번호
     * @return 조회된 KnowledgeBbs 객체
     */
    @Transactional
    public KnowledgeBbs selectKnowledgeBbs(int knowledgeNo) {
        
        // 1. 조회수 증가
        int result = knowledgeDao.increaseKnowledgeBbsCount(sqlSession, knowledgeNo);
        
        KnowledgeBbs know = null;
        
        // 2. 조회수 증가 성공 시 게시글 조회
        if(result > 0) {
            f = knowledgeDao.selectKnowledgeBbs(sqlSession, knowledgeNo);
        }
        
        return f; // 게시글 조회 실패 시 null 반환
    }

    /**
     * 새로운 게시글 등록 (트랜잭션 적용)
     * @param f 등록할 KnowledgeBbs 객체
     * @return 처리된 행의 수
     */
    @Transactional
    public int insertKnowledgeBbs(KnowledgeBbs f) {
        return knowledgeDao.insertKnowledgeBbs(sqlSession, f);
    }
    
    /**
     * 게시글 삭제 (삭제 상태 업데이트) (트랜잭션 적용)
     * @param knowledgeNo 삭제할 게시글 번호
     * @return 처리된 행의 수
     */
    @Transactional
    public int deleteKnowledgeBbs(int knowledgeNo) {
        return knowledgeDao.deleteKnowledgeBbs(sqlSession, knowledgeNo);
    }
}
