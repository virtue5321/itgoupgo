package com.itgoupgo.community.admin.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.itgoupgo.community.admin.model.service.AdminService;
import com.itgoupgo.community.common.model.vo.Pagination;
import com.itgoupgo.community.free.model.service.FreeService;
import com.itgoupgo.community.free.model.vo.FreeBbs;
import com.itgoupgo.community.info.model.service.InfoService;
import com.itgoupgo.community.info.model.vo.InfoBbs;
import com.itgoupgo.community.it.model.service.ItService;
import com.itgoupgo.community.it.model.vo.ItBbs;
import com.itgoupgo.community.knowledge.model.service.KnowledgeService;
import com.itgoupgo.community.knowledge.model.vo.KnowledgeBbs;
import com.itgoupgo.community.member.model.service.MemberService; // [추가] MemberService Import
import com.itgoupgo.community.member.model.vo.Member; // [추가] Member VO Import
import com.itgoupgo.community.notice.model.service.NoticeService; // [추가] NoticeService Import
import com.itgoupgo.community.notice.model.vo.NoticeBbs; // [추가] NoticeBbs VO Import
import com.itgoupgo.community.study.model.service.StudyService; // [추가] StudyService Import
import com.itgoupgo.community.study.model.vo.StudyBbs; // [추가] StudyBbs VO Import


@Controller
@RequestMapping("/admin")
public class AdminController {

    // Service 주입
    @Autowired private AdminService adminService;
    @Autowired private MemberService memberService;
    @Autowired private FreeService freeService;
    @Autowired private InfoService infoService;
    @Autowired private ItService itService;
    @Autowired private KnowledgeService knowledgeService;
    @Autowired private StudyService studyService;
    @Autowired private NoticeService noticeService;


    /**
     * 1. 대시보드 메인 페이지 (/admin/dashboard)
     */
    @GetMapping("/dashboard")
    public String adminMain() {
        // TODO: 대시보드 통계 데이터 조회 로직 추가
        return "admin/adminMain";
    }

    /**
     * 2. 회원 목록 조회 (/admin/member)
     */
    @GetMapping("/member")
    public String memberList(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        Model model) {
        
        int listCount = memberService.selectListCount(); 
        
        Pagination pageInfo = adminService.getPagination(currentPage, listCount);
        
        List<Member> memberList = memberService.selectList(currentPage);
        
        model.addAttribute("memberList", memberList);
        model.addAttribute("pageInfo", pageInfo);
        
        return "admin/memberManage";
    }

    // --- 게시글 관리 목록 조회 메서드 (Free, Info, It, Knowledge, Study, Notice) ---

    /**
     * 3. 자유게시판 게시글 목록 조회 (/admin/post/freeList)
     */
    @GetMapping("/post/freeList")
    public String freeList(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        Model model) {
        
        int listCount = freeService.selectListCount(); 
        Pagination pageInfo = adminService.getPagination(currentPage, listCount);
        
        // [수정됨] FreeService를 통해 현재 페이지 목록 조회
        List<FreeBbs> bbsList = freeService.selectList(currentPage);
        
        model.addAttribute("bbsList", bbsList);
        model.addAttribute("pageInfo", pageInfo);
        model.addAttribute("boardName", "자유게시판");
        model.addAttribute("boardCode", "free");
        
        // [수정됨] 뷰 경로를 freeBbsManage.jsp로 변경
        return "admin/freeBbsManage"; 
    }

    /**
     * 4. 정보공유 게시판 게시글 목록 조회 (/admin/post/infoList)
     */
    @GetMapping("/post/infoList")
    public String infoList(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        Model model) {
        
        int listCount = infoService.selectListCount(); 
        Pagination pageInfo = adminService.getPagination(currentPage, listCount);
        
        List<InfoBbs> bbsList = infoService.selectList(currentPage);
        
        model.addAttribute("bbsList", bbsList);
        model.addAttribute("pageInfo", pageInfo);
        model.addAttribute("boardName", "정보공유게시판");
        model.addAttribute("boardCode", "info");
        
        return "admin/infoBbsManage";
    }

    /**
     * 5. IT뉴스 게시글 목록 조회 (/admin/post/itList)
     */
    @GetMapping("/post/itList")
    public String itList(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        Model model) {
        
        int listCount = itService.selectListCount(); 
        Pagination pageInfo = adminService.getPagination(currentPage, listCount);
        
        List<ItBbs> bbsList = itService.selectList(currentPage);
        
        model.addAttribute("bbsList", bbsList);
        model.addAttribute("pageInfo", pageInfo);
        model.addAttribute("boardName", "IT뉴스");
        model.addAttribute("boardCode", "it");
        
        return "admin/itBbsManage";
    }

    /**
     * 6. 지식공유 게시판 게시글 목록 조회 (/admin/post/knowledgeList)
     */
    @GetMapping("/post/knowledgeList")
    public String knowledgeList(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        Model model) {
        
        int listCount = knowledgeService.selectListCount(); 
        Pagination pageInfo = adminService.getPagination(currentPage, listCount);
        
        List<KnowledgeBbs> bbsList = knowledgeService.selectList(currentPage);
        
        model.addAttribute("bbsList", bbsList);
        model.addAttribute("pageInfo", pageInfo);
        model.addAttribute("boardName", "지식공유게시판");
        model.addAttribute("boardCode", "knowledge");
        
        return "admin/postListManage";
    }

    /**
     * 7. 스터디모집 게시판 게시글 목록 조회 (/admin/post/studyList)
     */
    @GetMapping("/post/studyList")
    public String studyList(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        Model model) {
        
        int listCount = studyService.selectListCount(); 
        Pagination pageInfo = adminService.getPagination(currentPage, listCount);
        
        List<StudyBbs> bbsList = studyService.selectList(currentPage);
        
        model.addAttribute("bbsList", bbsList);
        model.addAttribute("pageInfo", pageInfo);
        model.addAttribute("boardName", "스터디모집게시판");
        model.addAttribute("boardCode", "study");
        
        return "admin/postListManage";
    }

    /**
     * 8. 공지사항 게시글 목록 조회 (/admin/post/noticeList)
     */
    @GetMapping("/post/noticeList")
    public String noticeList(
        @RequestParam(value = "currentPage", defaultValue = "1") int currentPage,
        Model model) {
        
        int listCount = noticeService.selectListCount(); 
        Pagination pageInfo = adminService.getPagination(currentPage, listCount);
        
        List<NoticeBbs> bbsList = noticeService.selectList(currentPage);
        
        model.addAttribute("bbsList", bbsList);
        model.addAttribute("pageInfo", pageInfo);
        model.addAttribute("boardName", "공지사항");
        model.addAttribute("boardCode", "notice");
        
        return "admin/postListManage";
    }

    /**
     * 9. 게시글 일괄 삭제 처리 (/admin/post/delete)
     * 선택된 게시글 번호들을 받아와 해당 게시글들의 상태를 'Y'(삭제)로 변경합니다.
     * @param boardCode 게시판 코드 (free, info, it, knowledge, study, notice)
     * @param bbsNoList 일괄 삭제할 게시글 번호 목록
     * @param rt RedirectAttributes (리다이렉트 시 메시지 전달용)
     * @return 리다이렉트할 게시글 목록 페이지
     */
    @PostMapping("/post/delete")
    public String deleteBulkPost(
            @RequestParam("boardCode") String boardCode,
            @RequestParam("bbsNoList") List<Integer> bbsNoList,
            RedirectAttributes rt) {

        int result = 0;
        
        // 게시판 코드에 따라 적절한 Service의 일괄 삭제 메서드 호출
        switch (boardCode) {
            case "free":
                result = freeService.deleteBulkFreeBbs(bbsNoList);
                break;
            case "info":
                result = infoService.deleteBulkInfoBbs(bbsNoList);
                break;
            case "it":
                result = itService.deleteBulkItBbs(bbsNoList);
                break;
            case "knowledge":
                result = knowledgeService.deleteBulkKnowledgeBbs(bbsNoList);
                break;
            case "study":
                result = studyService.deleteBulkStudyBbs(bbsNoList);
                break;
            case "notice":
                result = noticeService.deleteBulkNoticeBbs(bbsNoList);
                break;
            default:
                rt.addFlashAttribute("errorMsg", "유효하지 않은 게시판 코드입니다.");
                return "redirect:/admin/dashboard";
        }

        // 결과에 따라 사용자에게 메시지 전달
        if (result == bbsNoList.size()) {
            rt.addFlashAttribute("successMsg", result + "건의 게시글이 성공적으로 삭제(비활성화) 처리되었습니다.");
        } else if (result > 0) {
            // 일부만 삭제된 경우 (예상치 못한 케이스이므로 에러 메시지를 남김)
            rt.addFlashAttribute("errorMsg", result + "건의 게시글이 삭제 처리되었으나, " + (bbsNoList.size() - result) + "건의 처리에 실패했습니다. (DB 확인 필요)");
        } else {
            rt.addFlashAttribute("errorMsg", "게시글 일괄 삭제 처리에 실패했거나 처리된 게시글이 없습니다.");
        }

        // 삭제 후 해당 게시판 목록으로 리다이렉트
        return "redirect:/admin/post/" + boardCode + "List";
    }

}
