package com.itgoupgo.community.admin.controller;

import java.util.ArrayList; 
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping; 
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.itgoupgo.community.admin.model.service.AdminService;
import com.itgoupgo.community.member.model.vo.Member;

import jakarta.servlet.http.HttpSession;

/**
 * 관리자 페이지와 관련된 요청을 처리하는 컨트롤러 클래스입니다.
 */
@Controller
@RequestMapping("/admin") 
public class AdminController {
	
	@Autowired
	private AdminService adminService;

    // 관리자 대시보드 메인 페이지
    @GetMapping({"","/", "/dashboard"})
    public String adminDashboard() {
        // tiles 설정에 따라 /WEB-INF/views/admin/admin.jsp 뷰를 찾음
        return "admin/admin"; 
    }
    
    // 게시글 관리 페이지 (Placeholder)
    @GetMapping("/post")
    public String postManage() {
        return "admin/postManage";
    }
    
    // 댓글 관리 페이지 (Placeholder)
    @GetMapping("/reply")
    public String replyManage() {
        return "admin/replyManage";
    }

    // 통계 페이지 (Placeholder)
    @GetMapping("/stats")
    public String statsPage() {
        return "admin/stats";
    }

    // 로그아웃 (Placeholder - 실제 구현은 스프링 시큐리티 또는 MemberController에서 처리)
    @GetMapping("/logout")
    public String logout() {
        // 실제 로그아웃 로직은 SecurityConfig 또는 MemberController에서 처리
        return "redirect:/";
    }
    
    // 1. 회원 관리 페이지 - 전체 회원 목록 조회 (기본 화면)
    @GetMapping("/member")
    public String memberManage(Model model) {
        // 전체 회원 목록 조회
        List<Member> memberList = adminService.selectMemberList();
        model.addAttribute("memberList", memberList);
        
        // 검색 조건이 없는 기본 목록임을 표시 (페이징 시 사용 가능)
        model.addAttribute("searchCondition", "none"); 
        
        // tiles 설정에 따라 /WEB-INF/views/admin/memberManage.jsp 뷰를 찾음
        return "admin/memberManage";
    }
    
    // 2. 회원 상세 정보 페이지 조회
    @GetMapping("/memberDetail")
    public String memberDetail(@RequestParam("memberId") String memberId, Model model, HttpSession session) {
        // 회원 ID로 단일 회원 정보 조회
        Member member = adminService.searchMemberById(memberId);
        
        if (member != null) {
            model.addAttribute("member", member);
            return "admin/memberDetail";
        } else {
            // 회원이 없을 경우 alert 메시지 후 목록으로 리다이렉트
            session.setAttribute("alertMsg", "해당 회원 정보를 찾을 수 없습니다.");
            return "redirect:/admin/member"; 
        }
    }
    
    // 3. 회원 단일 탈퇴 처리 (계정 상태 'N'으로 변경)
    // memberDetail.jsp에서 요청하는 URI에 매핑
    @GetMapping("/delete")
    public String deleteMember(@RequestParam("memberId") String userId, HttpSession session) {
        
        int result = adminService.deleteMemberAdmin(userId);
        
        if (result > 0) {
            session.setAttribute("alertMsg", userId + " 님의 계정이 성공적으로 탈퇴 처리(상태 변경)되었습니다.");
        } else {
            session.setAttribute("alertMsg", userId + " 님의 계정 탈퇴 처리에 실패했습니다.");
        }
        
        return "redirect:/admin/member";
    }
    
    // 4. 회원 일괄 탈퇴 처리 (체크된 다수의 회원)
    @PostMapping("/deleteCheckMember")
    public String deleteCheckMember(
            @RequestParam(value = "memberNoList", required = true) List<Integer> memberNoList, 
            HttpSession session) {
        
        // 서비스에서 트랜잭션 처리
        int result = adminService.deleteCheckMember(memberNoList);
        
        if (result == memberNoList.size()) {
            session.setAttribute("alertMsg", result + "명의 회원이 성공적으로 일괄 탈퇴 처리되었습니다.");
        } else {
            session.setAttribute("alertMsg", "일괄 탈퇴 처리 중 일부 오류가 발생했습니다. (" + result + "명 처리됨)");
        }

        return "redirect:/admin/member";
    }
    
    // 5. 관리자페이지 회원 이름으로 검색 (List<Member> 반환)
    @GetMapping("/searchMemberName")
    public String searchMemberName(
        @RequestParam("keyword") String memberName, 
        Model model) {
    	
        List<Member> searchList = adminService.searchMemberByName(memberName);
        
        model.addAttribute("memberList", searchList);
        // 검색 조건과 키워드를 모델에 담아 JSP에 전달하여 검색 결과임을 표시
        model.addAttribute("searchCondition", "searchMemberName");
        model.addAttribute("searchKeyword", memberName);
    	
    	return "admin/memberManage";
    }
    
    // 6. 관리자페이지 회원 아이디로 검색 (Member 단일 객체 반환 -> JSP 호환을 위해 List로 감싸서 반환)
    @GetMapping("/searchMemberId")
    public String searchMemberId(
        @RequestParam("keyword") String memberId,
        Model model) {
    	
        Member m = adminService.searchMemberById(memberId);
        
        // JSP 호환을 위해 List로 감싸기
        List<Member> searchList = new ArrayList<>();
        if (m != null) {
            searchList.add(m);
        }
        
        model.addAttribute("memberList", searchList);
        // 검색 조건과 키워드를 모델에 담아 JSP에 전달하여 검색 결과임을 표시
        model.addAttribute("searchCondition", "searchMemberId");
        model.addAttribute("searchKeyword", memberId);
        
        return "admin/memberManage";
    }
    
    // 7. 관리자페이지 회원 가입일로 검색 (List<Member> 반환)
    @GetMapping("/searchEnrollDate")
    public String searchEnrollDate(
        @RequestParam("startDate") String startDate,
        @RequestParam("endDate") String endDate,
        Model model) {
        
        // 시작일과 종료일로 회원 목록 검색 (AdminService에 해당 메서드가 구현되어 있어야 함)
        // List<Member> searchList = adminService.searchMemberByEnrollDate(startDate, endDate);
        
        // 임시로 전체 목록 반환 (실제 구현 시 위 주석 처리된 코드를 사용)
        List<Member> searchList = adminService.selectMemberList();
        
        model.addAttribute("memberList", searchList);
        model.addAttribute("searchCondition", "searchEnrollDate");
        model.addAttribute("searchKeyword", startDate + " ~ " + endDate);
        
        return "admin/memberManage";
    }
}
