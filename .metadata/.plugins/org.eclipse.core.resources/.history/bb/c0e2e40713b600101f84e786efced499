package com.itgoupgo.community.notice.model.dao;

import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.stereotype.Repository;

import com.itgoupgo.community.notice.model.vo.NoticeBbs;

/**
 * 공지사항 게시판 Data Access Object (DAO)
 * MyBatis를 이용해 DB에 직접 접근하여 CRUD 작업을 수행합니다.
 */
@Repository
public class NoticeDao {

	/**
	 * 전체 게시글 개수 조회 (페이징용)
	 * @param sqlSession MyBatis 쿼리 실행 객체
	 * @return 전체 게시글 수
	 */
	public int selectListCount(SqlSessionTemplate sqlSession) {
		
		return sqlSession.selectOne("adminMapper.selectListCount");
	}

	/**
	 * 게시글 목록 조회 (페이징 적용)
	 * @param sqlSession MyBatis 쿼리 실행 객체
	 * @param rowBounds 페이징 정보 (offset, limit)
	 * @return 게시글 목록
	 */
	public List<NoticeBbs> selectList(SqlSessionTemplate sqlSession, RowBounds rowBounds) {

		return sqlSession.selectList("adminMapper.selectList", null, rowBounds);
	}
	
	/**
	 * 게시글 조회수 증가
	 * (공지사항은 일반적으로 조회수 증가가 없지만, 일반 게시판과 동일하게 메서드 구조를 통일)
	 * @param sqlSession MyBatis 쿼리 실행 객체
	 * @param noticeNo 조회할 게시글 번호
	 * @return 처리된 행의 수
	 */
	public int increaseNoticeBbsCount(SqlSessionTemplate sqlSession, int noticeNo) {
		// id="noticeMapper.increaseNoticeBbsCount"에 해당하는 쿼리 실행
		return sqlSession.update("noticeMapper.increaseNoticeBbsCount", noticeNo);
	}
	
	/**
	 * 게시글 상세 조회
	 * @param sqlSession MyBatis 쿼리 실행 객체
	 * @param noticeNo 조회할 게시글 번호
	 * @return 조회된 NoticeBbs 객체
	 */
	public NoticeBbs selectNoticeBbs(SqlSessionTemplate sqlSession, int noticeNo) {
		// id="noticeMapper.selectNoticeBbs"에 해당하는 쿼리 실행
		return sqlSession.selectOne("noticeMapper.selectNoticeBbs", noticeNo);
	}

	/**
	 * 새로운 게시글 등록
	 * @param sqlSession MyBatis 쿼리 실행 객체
	 * @param f 등록할 NoticeBbs 객체
	 * @return 처리된 행의 수
	 */
	public int insertNoticeBbs(SqlSessionTemplate sqlSession, NoticeBbs f) {
		// id="noticeMapper.insertNoticeBbs"에 해당하는 쿼리 실행
		return sqlSession.insert("noticeMapper.insertNoticeBbs", f);
	}
	
	/**
	 * 게시글 삭제 (DELETE_STATUS 업데이트)
	 * @param sqlSession MyBatis 쿼리 실행 객체
	 * @param noticeNo 삭제할 게시글 번호
	 * @return 처리된 행의 수
	 */
	public int deleteNoticeBbs(SqlSessionTemplate sqlSession, int noticeNo) {

		return sqlSession.update("adminMapper.deleteNoticeBbs", noticeNo);
	}
	
	public int deleteNoticeBbsCheck(SqlSessionTemplate sqlSession, List<Integer> bbsNoList) {

		return sqlSession.update("adminMapper.deleteNoticeBbsCheck", bbsNoList);
    }
}
